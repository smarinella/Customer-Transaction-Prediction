
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c9f1b7c6",
   "metadata": {},
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75545cfe",
   "metadata": {},
   "source": [
    "\n",
    "<br>\n",
    "<center><font size='10' style=\"color:cadetblue\"><b> Customer Transaction Prediction </b> </font>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d2696a1",
   "metadata": {},
   "source": [
    "<br>\n",
    "<center><font size='5' style=\"color:darkgray\"><b> Proyecto Final - Coder House </b> </font>\n",
    "\n",
    "<br>\n",
    "<br>\n",
    "\n",
    "<center><font size='5' style=\"color:darkgray\"><b> Notebook Zarina Madelaine Breitman </b> </font>\n",
    "    \n",
    "<br>\n",
    "<br>\n",
    "    \n",
    "<center><font size='5' style=\"color:darkgray\"><b> Notebook I  de II </b> </font>    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90c13382",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b368afaf",
   "metadata": {},
   "source": [
    "<font size='6' style=\"color:cadetblue\"><b> Content </b> </font>\n",
    "<a name=\"content\"></a>\n",
    "<br>\n",
    "\n",
    "\n",
    "1. [Imports](#Imports) \n",
    "<br>\n",
    "<br>\n",
    "\n",
    "2. [Dataset](#Dataset) \n",
    "<br>\n",
    "<br>\n",
    "\n",
    "3. [Models](#Models)\n",
    "<br>\n",
    "\n",
    "    3.1 [K Nearest Neighbours Classifier](#KNC)\n",
    "    \n",
    "    3.2 [Logistic Regression](#Lgr) \n",
    "    \n",
    "    3.3 [ADABoost Classifier](#ADABoost)\n",
    "    \n",
    "    3.4 [Catboost](#Catboost)\n",
    "    \n",
    "    3.5 [XGBoost](#XGBoost)\n",
    "    \n",
    "    3.6 [Light GBM](#LightGBM)\n",
    "    \n",
    "    3.7 [Gaussian Naive Bayes](#GNB)\n",
    "        \n",
    "   \n",
    "<br>\n",
    "\n",
    "\n",
    "4. [Optimized models](#OptimizedM)\n",
    "<br>\n",
    "\n",
    "    4.1 [Logistic Regression with optimized parameters](#LgrOpt)\n",
    "    \n",
    "    4.2 [Catboot with LightBGM parameters](#CatboostOpt2)\n",
    "    \n",
    "    4.3 [Catboost with optimized parameters](#CatboostOpt1)\n",
    "    \n",
    "    4.4 [Resumen de modelos](#MSummary)\n",
    "    <br>\n",
    "    <br>\n",
    "    <br>\n",
    "\n",
    "\n",
    "5. [Models stacking](#Stacking)\n",
    "<br>\n",
    "\n",
    "    5.1 [Logistic Regression + Catboost](#Lg+Cat)\n",
    "    <br>\n",
    "\n",
    "\n",
    "6. [Models stacking with optimization](#Optimization)\n",
    "<br>\n",
    "\n",
    "    6.1 [Logistic Regression + Catboost Optimized)](#Lg+CatOpt)\n",
    "    \n",
    "    6.2 [Logistic Regression + Catboost Optimized + Cat Final](#Lg+CatOpt+Catfinal)\n",
    "    \n",
    "    6.3 [Logistic Regression + Catboost Optimized + GaussianNB](#Lg+CatOpt+GNB)\n",
    "    \n",
    "    6.4 [Logistic Regression + GaussianNB + GaussianNB Final](#Lg+GNB+GNBfinal)\n",
    "    \n",
    "    6.5 [GaussianNBx3](#GNBx3)\n",
    "    \n",
    "    6.6 [GaussianNBx5](#GNBx5)\n",
    "    \n",
    "    6.7 [GaussianNBx7](#GNBx7)\n",
    "    \n",
    "    6.8 [GaussianNBx11](#GNBx11)\n",
    "    \n",
    "    6.9 [Models ensemble summary](#EnsembleSummary)\n",
    "    <br>\n",
    "    <br>\n",
    "    \n",
    "7. [Conclusión final](#Conclusion)\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44bc35ec",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d1d90b2",
   "metadata": {},
   "source": [
    "<font size='6' style=\"color:cadetblue\"><b> Imports </b> </font>\n",
    "<a name=\"Imports\"></a>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d3b60e5",
   "metadata": {},
   "source": [
    "Las importaciones realizadas están divididas según el rol que tienen en la notebook. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "cbddfc2e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-20T02:15:53.144691Z",
     "start_time": "2022-11-20T02:15:53.136712Z"
    }
   },
   "outputs": [],
   "source": [
    "#librerías para manipulación de datos\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "#librerías para la visualización de los datos\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "\n",
    "## Preparación de los datos para el trabajo con modelos\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "\n",
    "## Models from Sklearn,XGBoost, Catboost\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from catboost import CatBoostClassifier\n",
    "import xgboost as xgb\n",
    "from sklearn import svm\n",
    "from sklearn.ensemble import StackingClassifier\n",
    "from lightgbm import LGBMClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "\n",
    "#Metrics \n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import ConfusionMatrixDisplay\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import f1_score\n",
    "from scipy.stats import gmean\n",
    "\n",
    "# Other imports\n",
    "import time\n",
    "import pickle\n",
    "import joblib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84cfa848",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c93389a7",
   "metadata": {},
   "source": [
    "<font size='6' style=\"color:cadetblue\"><b> Dataset </b> </font>\n",
    "\n",
    "<a name=\"Dataset\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "50534b01",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-24T19:35:31.656796Z",
     "start_time": "2022-11-24T19:35:30.878700Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>target</th>\n",
       "      <th>var_0</th>\n",
       "      <th>var_1</th>\n",
       "      <th>var_2</th>\n",
       "      <th>var_3</th>\n",
       "      <th>var_4</th>\n",
       "      <th>var_5</th>\n",
       "      <th>var_6</th>\n",
       "      <th>var_7</th>\n",
       "      <th>var_8</th>\n",
       "      <th>...</th>\n",
       "      <th>var_190</th>\n",
       "      <th>var_191</th>\n",
       "      <th>var_192</th>\n",
       "      <th>var_193</th>\n",
       "      <th>var_194</th>\n",
       "      <th>var_195</th>\n",
       "      <th>var_196</th>\n",
       "      <th>var_197</th>\n",
       "      <th>var_198</th>\n",
       "      <th>var_199</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID_code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>train_0</th>\n",
       "      <td>0</td>\n",
       "      <td>8.9255</td>\n",
       "      <td>-6.7863</td>\n",
       "      <td>11.9081</td>\n",
       "      <td>5.0930</td>\n",
       "      <td>11.4607</td>\n",
       "      <td>-9.2834</td>\n",
       "      <td>5.1187</td>\n",
       "      <td>18.6266</td>\n",
       "      <td>-4.9200</td>\n",
       "      <td>...</td>\n",
       "      <td>4.4354</td>\n",
       "      <td>3.9642</td>\n",
       "      <td>3.1364</td>\n",
       "      <td>1.6910</td>\n",
       "      <td>18.522699</td>\n",
       "      <td>-2.3978</td>\n",
       "      <td>7.8784</td>\n",
       "      <td>8.5635</td>\n",
       "      <td>12.780300</td>\n",
       "      <td>-1.0914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>train_1</th>\n",
       "      <td>0</td>\n",
       "      <td>11.5006</td>\n",
       "      <td>-4.1473</td>\n",
       "      <td>13.8588</td>\n",
       "      <td>5.3890</td>\n",
       "      <td>12.3622</td>\n",
       "      <td>7.0433</td>\n",
       "      <td>5.6208</td>\n",
       "      <td>16.5338</td>\n",
       "      <td>3.1468</td>\n",
       "      <td>...</td>\n",
       "      <td>7.6421</td>\n",
       "      <td>7.7214</td>\n",
       "      <td>2.5837</td>\n",
       "      <td>10.9516</td>\n",
       "      <td>15.430500</td>\n",
       "      <td>2.0339</td>\n",
       "      <td>8.1267</td>\n",
       "      <td>8.7889</td>\n",
       "      <td>18.356001</td>\n",
       "      <td>1.9518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>train_2</th>\n",
       "      <td>0</td>\n",
       "      <td>8.6093</td>\n",
       "      <td>-2.7457</td>\n",
       "      <td>12.0805</td>\n",
       "      <td>7.8928</td>\n",
       "      <td>10.5825</td>\n",
       "      <td>-9.0837</td>\n",
       "      <td>6.9427</td>\n",
       "      <td>14.6155</td>\n",
       "      <td>-4.9193</td>\n",
       "      <td>...</td>\n",
       "      <td>2.9057</td>\n",
       "      <td>9.7905</td>\n",
       "      <td>1.6704</td>\n",
       "      <td>1.6858</td>\n",
       "      <td>21.604200</td>\n",
       "      <td>3.1417</td>\n",
       "      <td>-6.5213</td>\n",
       "      <td>8.2675</td>\n",
       "      <td>14.722200</td>\n",
       "      <td>0.3965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>train_3</th>\n",
       "      <td>0</td>\n",
       "      <td>11.0604</td>\n",
       "      <td>-2.1518</td>\n",
       "      <td>8.9522</td>\n",
       "      <td>7.1957</td>\n",
       "      <td>12.5846</td>\n",
       "      <td>-1.8361</td>\n",
       "      <td>5.8428</td>\n",
       "      <td>14.9250</td>\n",
       "      <td>-5.8609</td>\n",
       "      <td>...</td>\n",
       "      <td>4.4666</td>\n",
       "      <td>4.7433</td>\n",
       "      <td>0.7178</td>\n",
       "      <td>1.4214</td>\n",
       "      <td>23.034700</td>\n",
       "      <td>-1.2706</td>\n",
       "      <td>-2.9275</td>\n",
       "      <td>10.2922</td>\n",
       "      <td>17.969700</td>\n",
       "      <td>-8.9996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>train_4</th>\n",
       "      <td>0</td>\n",
       "      <td>9.8369</td>\n",
       "      <td>-1.4834</td>\n",
       "      <td>12.8746</td>\n",
       "      <td>6.6375</td>\n",
       "      <td>12.2772</td>\n",
       "      <td>2.4486</td>\n",
       "      <td>5.9405</td>\n",
       "      <td>19.2514</td>\n",
       "      <td>6.2654</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.4905</td>\n",
       "      <td>9.5214</td>\n",
       "      <td>-0.1508</td>\n",
       "      <td>9.1942</td>\n",
       "      <td>13.287600</td>\n",
       "      <td>-1.5121</td>\n",
       "      <td>3.9267</td>\n",
       "      <td>9.5031</td>\n",
       "      <td>17.997400</td>\n",
       "      <td>-8.8104</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 201 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         target    var_0   var_1    var_2   var_3    var_4   var_5   var_6  \\\n",
       "ID_code                                                                      \n",
       "train_0       0   8.9255 -6.7863  11.9081  5.0930  11.4607 -9.2834  5.1187   \n",
       "train_1       0  11.5006 -4.1473  13.8588  5.3890  12.3622  7.0433  5.6208   \n",
       "train_2       0   8.6093 -2.7457  12.0805  7.8928  10.5825 -9.0837  6.9427   \n",
       "train_3       0  11.0604 -2.1518   8.9522  7.1957  12.5846 -1.8361  5.8428   \n",
       "train_4       0   9.8369 -1.4834  12.8746  6.6375  12.2772  2.4486  5.9405   \n",
       "\n",
       "           var_7   var_8  ...  var_190  var_191  var_192  var_193    var_194  \\\n",
       "ID_code                   ...                                                  \n",
       "train_0  18.6266 -4.9200  ...   4.4354   3.9642   3.1364   1.6910  18.522699   \n",
       "train_1  16.5338  3.1468  ...   7.6421   7.7214   2.5837  10.9516  15.430500   \n",
       "train_2  14.6155 -4.9193  ...   2.9057   9.7905   1.6704   1.6858  21.604200   \n",
       "train_3  14.9250 -5.8609  ...   4.4666   4.7433   0.7178   1.4214  23.034700   \n",
       "train_4  19.2514  6.2654  ...  -1.4905   9.5214  -0.1508   9.1942  13.287600   \n",
       "\n",
       "         var_195  var_196  var_197    var_198  var_199  \n",
       "ID_code                                                 \n",
       "train_0  -2.3978   7.8784   8.5635  12.780300  -1.0914  \n",
       "train_1   2.0339   8.1267   8.7889  18.356001   1.9518  \n",
       "train_2   3.1417  -6.5213   8.2675  14.722200   0.3965  \n",
       "train_3  -1.2706  -2.9275  10.2922  17.969700  -8.9996  \n",
       "train_4  -1.5121   3.9267   9.5031  17.997400  -8.8104  \n",
       "\n",
       "[5 rows x 201 columns]"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Abrimos el archivo tras haber realizado la exploración de los datos. \n",
    "\n",
    "df = pd.read_pickle(\"trainDownCast.pkl\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "cba0b8bb",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-24T19:35:32.879021Z",
     "start_time": "2022-11-24T19:35:32.608010Z"
    }
   },
   "outputs": [],
   "source": [
    "#Dividimos el set de datos en datos a predecir (y) y los datos utilizados para alcanzar esas predicciones (X) \n",
    "\n",
    "X= df.drop(columns= ['target'])\n",
    "y= df['target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "6a012c35",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-24T19:35:35.905239Z",
     "start_time": "2022-11-24T19:35:35.886971Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Con un dataset tan asimétrico, reducimos el posible error separando los datos empleando Stratified KFold\n",
    "#Utilizamos 10 folds para manteneres la misma proporción de variables/target que en el dataset original \n",
    "\n",
    "skf = StratifiedKFold(n_splits=10, shuffle= True, random_state= 1)\n",
    "skf.get_n_splits(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6217106c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T00:14:04.430537Z",
     "start_time": "2022-11-19T00:14:04.419955Z"
    }
   },
   "outputs": [],
   "source": [
    "#create a list to store all metrics results\n",
    "\n",
    "metrics = []\n",
    "models = []\n",
    "tiempo = []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dad9fb1",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcb33441",
   "metadata": {},
   "source": [
    "<font size='6' style=\"color:cadetblue\"><b> Models </b> </font>\n",
    "\n",
    "<a name=\"Models\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2eede0b",
   "metadata": {},
   "source": [
    "Se estudiarán varios modelos boost y no boost y se analizará su performance empleando Recall, Precision y F1."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "336ba81f",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be330336",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> K Nearest Neighbours Classifier </b> </font>\n",
    "\n",
    "<a name=\"KNC\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c29fe656",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T00:29:13.466481Z",
     "start_time": "2022-11-19T00:14:07.358081Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.22314234784715345\n",
      "Recall's geometric mean is  0.003168808598887372\n",
      "F1 geometric mean is  0.006247487882395952\n",
      "El tiempo del modelo fue de  906.0828020572662 segundos\n"
     ]
    }
   ],
   "source": [
    "#Calling the model\n",
    "kn = KNeighborsClassifier()\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index]\n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    kn.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=kn.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models.append(\"K Nearest Neighbours\")\n",
    "metrics.append(results_gmean)\n",
    "tiempo.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "35cba412",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T00:29:13.853271Z",
     "start_time": "2022-11-19T00:29:13.466481Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"KNC.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'kn' model using the highest protocol available.\n",
    "    pickle.dump(kn, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d9b1ca5",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc6040e7",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Logistic Regression </b> </font>\n",
    "\n",
    "<a name=\"LGR\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ce9c90c1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T01:43:06.872663Z",
     "start_time": "2022-11-19T01:21:44.438439Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.686157970283997\n",
      "Recall's geometric mean is  0.2693743387356455\n",
      "F1 geometric mean is  0.386851281451094\n",
      "El tiempo del modelo fue de  1282.395058631897 segundos\n"
     ]
    }
   ],
   "source": [
    "# initialize model\n",
    "lg=LogisticRegression (random_state=1, max_iter=7000)\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index]\n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    lg.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=lg.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models.append(\"Logistics Regression\")\n",
    "metrics.append(results_gmean)\n",
    "tiempo.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "779a07bd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T01:43:06.888654Z",
     "start_time": "2022-11-19T01:43:06.874762Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"LogisticRegression.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'lg' model using the highest protocol available.\n",
    "    pickle.dump(lg, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03a4fe74",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62427f0d",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> AdaBoost Classifier </b> </font>\n",
    "\n",
    "<a name=\"AdaBoost\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "88978359",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T01:06:49.825819Z",
     "start_time": "2022-11-19T00:29:13.855600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.6431428725138786\n",
      "Recall's geometric mean is  0.16762118162834622\n",
      "F1 geometric mean is  0.2659170571274426\n",
      "El tiempo del modelo fue de  2255.9446580410004 segundos\n"
     ]
    }
   ],
   "source": [
    "#Calling the model\n",
    "ada = AdaBoostClassifier()\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index]\n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    ada.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=ada.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models.append(\"AdaBoost Classifier\")\n",
    "metrics.append(results_gmean)\n",
    "tiempo.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2a24a440",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T01:06:49.841408Z",
     "start_time": "2022-11-19T01:06:49.825819Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"AdaBoost.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'ada' model using the highest protocol available.\n",
    "    pickle.dump(ada, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ae9f7a2",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7620a0e",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Catboost </b> </font>\n",
    "\n",
    "<a name=\"Catboost\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "42704e06",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T01:21:44.421480Z",
     "start_time": "2022-11-19T01:06:49.842480Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.7676717887029905\n",
      "Recall's geometric mean is  0.33627362757010126\n",
      "F1 geometric mean is  0.46764628767223493\n",
      "El tiempo del modelo fue de  894.5416402816772 segundos\n"
     ]
    }
   ],
   "source": [
    "# initialize model\n",
    "cat= CatBoostClassifier(logging_level=\"Silent\")\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index]\n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    cat.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=cat.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models.append(\"Catboost\")\n",
    "metrics.append(results_gmean)\n",
    "tiempo.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bdf27d69",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T01:21:44.436477Z",
     "start_time": "2022-11-19T01:21:44.423481Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"Catboost.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'cat' model using the highest protocol available.\n",
    "    pickle.dump(cat, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e68c707",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4464a32",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> XGBoost </b> </font>\n",
    "\n",
    "<a name=\"XGBoost\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6abd8d5e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T07:06:58.746726Z",
     "start_time": "2022-11-19T06:32:04.756657Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.6938109904978287\n",
      "Recall's geometric mean is  0.24784105353609132\n",
      "F1 geometric mean is  0.3651733224063751\n",
      "El tiempo del modelo fue de  2093.9596161842346 segundos\n"
     ]
    }
   ],
   "source": [
    "# initialize model\n",
    "xgb = xgb.XGBClassifier()\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index]\n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    xgb.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=xgb.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models.append(\"XGBoost\")\n",
    "metrics.append(results_gmean)\n",
    "tiempo.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3da01df5",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T07:06:59.078480Z",
     "start_time": "2022-11-19T07:06:59.055574Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"XGBoost.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'xgb' model using the highest protocol available.\n",
    "    pickle.dump(xgb, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "149e1423",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a8afe9d",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Light GBM </b> </font>\n",
    "\n",
    "<a name=\"LightGBM\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4996890f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T07:08:41.240780Z",
     "start_time": "2022-11-19T07:06:59.249656Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.8731491174118706\n",
      "Recall's geometric mean is  0.09469890274129372\n",
      "F1 geometric mean is  0.170857624360795\n",
      "El tiempo del modelo fue de  101.9751660823822 segundos\n"
     ]
    }
   ],
   "source": [
    "# initialize model\n",
    "lgbm = LGBMClassifier()\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index]\n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    lgbm.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=lgbm.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models.append(\"LightGBM\")\n",
    "metrics.append(results_gmean)\n",
    "tiempo.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "e52ae7b6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T07:08:41.272656Z",
     "start_time": "2022-11-19T07:08:41.242770Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"LightGBM.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'lgbm' model using the highest protocol available.\n",
    "    pickle.dump(lgbm, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd1ad18c",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2b732a2",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Gaussian Naive Bayes </b> </font>\n",
    "\n",
    "<a name=\"GNB\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "85e5f020",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T07:08:46.983537Z",
     "start_time": "2022-11-19T07:08:41.477001Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.6474871217871533\n",
      "Recall's geometric mean is  0.4037870022195769\n",
      "F1 geometric mean is  0.4973673984424232\n",
      "El tiempo del modelo fue de  5.492807626724243 segundos\n"
     ]
    }
   ],
   "source": [
    "#initialize the model\n",
    "gnb= GaussianNB()\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index]\n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    gnb.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=gnb.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models.append(\"Gaussian Naive Bayes\")\n",
    "metrics.append(results_gmean)\n",
    "tiempo.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2f497186",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T07:08:46.999494Z",
     "start_time": "2022-11-19T07:08:46.985532Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"GaussianNB.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'gnb' model using the highest protocol available.\n",
    "    pickle.dump(gnb, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ab0cb91",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28d28580",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c88548b",
   "metadata": {},
   "source": [
    "<font size='6' style=\"color:cadetblue\"><b> Optimized models </b> </font>\n",
    "\n",
    "<a name=\"OptimizedM\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "554c8214",
   "metadata": {},
   "source": [
    "Los valores introducidos en los modelos a continuación fueron tomados del trabajo exploratorio de mis compañeros de equipo y mio.\n",
    "\n",
    "Se buscó optimizar los parámetros de los modelos con mayor recall hallados previamente, mediante la optimización Bayesiana empleando la librería Optuna.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59fce797",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3884a5dc",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Logistic Regression with optimized parameters </b> </font>\n",
    "\n",
    "<a name=\"LgrOpt\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)   \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "a642e78e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-24T19:47:07.621903Z",
     "start_time": "2022-11-24T19:37:12.144269Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.6889298395915328\n",
      "Recall's geometric mean is  0.2621129031571173\n",
      "F1 geometric mean is  0.3797317025820092\n",
      "El tiempo del modelo fue de  595.4162454605103 segundos\n"
     ]
    }
   ],
   "source": [
    "# initialize model\n",
    "lgOp=LogisticRegression (random_state=1, max_iter=23980, penalty= 'none', solver= 'sag')\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    lgOp.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=lgOp.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models.append(\"Logistic Regression Optimized\")\n",
    "metrics.append(results_gmean)\n",
    "tiempo.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e2dcce4",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0751d4b0",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Catboot with LightBGM parameters </b> </font>\n",
    "\n",
    "<a name=\"CatboostOpt2\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)   \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb688cdc",
   "metadata": {},
   "source": [
    "Catboost es un modelo del tipo boost que estuvo en el top 3 de modelos con mayor recall. Sin embargo, es un modelo que lleva mucho tiempo para optimizar. Por consiguiente, se utilizó un modelo boost más liviano (Light Boost) para realizar la optimización Bayesiana y luego emplear esos parámetros en el modelo Catboost. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "f89c988f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T23:08:28.556877Z",
     "start_time": "2022-11-23T22:57:11.967685Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.7489047290688379\n",
      "Recall's geometric mean is  0.3356053508070936\n",
      "F1 geometric mean is  0.4634853908526711\n",
      "El tiempo del modelo fue de  676.4494330883026 segundos\n"
     ]
    }
   ],
   "source": [
    "# initialize model\n",
    "catOp_GBM= CatBoostClassifier(n_estimators= 510, max_depth=7 ,logging_level=\"Silent\")\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    catOp_GBM.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=catOp_GBM.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models.append(\"Catboost Optimized with LightGBM\")\n",
    "metrics.append(results_gmean)\n",
    "tiempo.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "ec5ef6f7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-25T20:59:15.131617Z",
     "start_time": "2022-11-25T20:59:14.972197Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"CatboostOpt_with_LGBM.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'catOp_GBM' model using the highest protocol available.\n",
    "    pickle.dump(catOp_GBM, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5476ad9",
   "metadata": {},
   "source": [
    "En vista de que emplear los parámetros de optimización obtenidos con Light Boost no hay mejorado el rendimiento de Catboost, elegimos optimizar Catboost a pesar del costo computacional del mismo. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ce9328e",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7def8f37",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Catboot with Optimized parameters </b> </font>\n",
    "\n",
    "<a name=\"CatboostOpt1\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)   \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e1f4e415",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T07:43:34.363762Z",
     "start_time": "2022-11-19T07:08:47.213955Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.5702971121416844\n",
      "Recall's geometric mean is  0.38109299600428204\n",
      "F1 geometric mean is  0.4568425852790152\n",
      "El tiempo del modelo fue de  2087.1265156269073 segundos\n"
     ]
    }
   ],
   "source": [
    "# initialize model\n",
    "catOp= CatBoostClassifier(iterations=3600, learning_rate= 0.85, depth= 4, logging_level=\"Silent\")\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    catOp.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=catOp.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models.append(\"Catboost Optimized\")\n",
    "metrics.append(results_gmean)\n",
    "tiempo.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e55f4dd8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-19T07:43:34.378722Z",
     "start_time": "2022-11-19T07:43:34.365758Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"CatboostOpt.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'catOp' model using the highest protocol available.\n",
    "    pickle.dump(catOp, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67af0248",
   "metadata": {},
   "source": [
    "El rendimiento de Catboost con los parámetros obtenidos a través de la optimización Bayesiana ha mejorado el rendimiento del modelo. Sin embargo, esta mejora no supera el 15%."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57288520",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbcc6105",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Models summary </b> </font>\n",
    "\n",
    "<a name=\"MSummary\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "b32eec57",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-24T19:47:07.714535Z",
     "start_time": "2022-11-24T19:47:07.666812Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([0.22314235, 0.00316881, 0.00624749]),\n",
       " array([0.64314287, 0.16762118, 0.26591706]),\n",
       " array([0.76767179, 0.33627363, 0.46764629]),\n",
       " array([0.68615797, 0.26937434, 0.38685128]),\n",
       " array([0.69381099, 0.24784105, 0.36517332]),\n",
       " array([0.87314912, 0.0946989 , 0.17085762]),\n",
       " array([0.64748712, 0.403787  , 0.4973674 ]),\n",
       " array([0.57029711, 0.381093  , 0.45684259]),\n",
       " array([0.74890473, 0.33560535, 0.46348539]),\n",
       " array([0.68892984, 0.2621129 , 0.3797317 ])]"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reviso la lista de listas creada para las métricas de todos los modelos\n",
    "metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "5f9d40b0",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-25T21:26:04.736059Z",
     "start_time": "2022-11-25T21:26:04.701477Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PRECISION</th>\n",
       "      <th>RECALL</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>K Nearest Neighbours</th>\n",
       "      <td>0.223142</td>\n",
       "      <td>0.003169</td>\n",
       "      <td>0.006247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AdaBoost Classifier</th>\n",
       "      <td>0.643143</td>\n",
       "      <td>0.167621</td>\n",
       "      <td>0.265917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Catboost</th>\n",
       "      <td>0.767672</td>\n",
       "      <td>0.336274</td>\n",
       "      <td>0.467646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistics Regression</th>\n",
       "      <td>0.686158</td>\n",
       "      <td>0.269374</td>\n",
       "      <td>0.386851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XGBoost</th>\n",
       "      <td>0.693811</td>\n",
       "      <td>0.247841</td>\n",
       "      <td>0.365173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LightGBM</th>\n",
       "      <td>0.873149</td>\n",
       "      <td>0.094699</td>\n",
       "      <td>0.170858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gaussian Naive Bayes</th>\n",
       "      <td>0.647487</td>\n",
       "      <td>0.403787</td>\n",
       "      <td>0.497367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Catboost Optimized</th>\n",
       "      <td>0.570297</td>\n",
       "      <td>0.381093</td>\n",
       "      <td>0.456843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Catboost Optimized with LightGBM</th>\n",
       "      <td>0.748905</td>\n",
       "      <td>0.335605</td>\n",
       "      <td>0.463485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistic Regression Optimized</th>\n",
       "      <td>0.688930</td>\n",
       "      <td>0.262113</td>\n",
       "      <td>0.379732</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  PRECISION    RECALL        F1\n",
       "K Nearest Neighbours               0.223142  0.003169  0.006247\n",
       "AdaBoost Classifier                0.643143  0.167621  0.265917\n",
       "Catboost                           0.767672  0.336274  0.467646\n",
       "Logistics Regression               0.686158  0.269374  0.386851\n",
       "XGBoost                            0.693811  0.247841  0.365173\n",
       "LightGBM                           0.873149  0.094699  0.170858\n",
       "Gaussian Naive Bayes               0.647487  0.403787  0.497367\n",
       "Catboost Optimized                 0.570297  0.381093  0.456843\n",
       "Catboost Optimized with LightGBM   0.748905  0.335605  0.463485\n",
       "Logistic Regression Optimized      0.688930  0.262113  0.379732"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creo un dataframe para visualizar como tabla las 3 métricas calculadas para todos los modelos evaluados\n",
    "#Los nombres de los modelos fueron almacenados en la lista modelos cuando se fueron corriendo\n",
    "\n",
    "columnas = [\"PRECISION\", \"RECALL\", \"F1\"]\n",
    "resumen_full_dataset = pd.DataFrame(metrics, columns=columnas, index=models)\n",
    "resumen_full_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "e809c287",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-25T21:26:07.336287Z",
     "start_time": "2022-11-25T21:26:07.311027Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PRECISION</th>\n",
       "      <th>RECALL</th>\n",
       "      <th>F1</th>\n",
       "      <th>TIEMPO (s)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>K Nearest Neighbours</th>\n",
       "      <td>0.223142</td>\n",
       "      <td>0.003169</td>\n",
       "      <td>0.006247</td>\n",
       "      <td>906.082802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AdaBoost Classifier</th>\n",
       "      <td>0.643143</td>\n",
       "      <td>0.167621</td>\n",
       "      <td>0.265917</td>\n",
       "      <td>2255.944658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Catboost</th>\n",
       "      <td>0.767672</td>\n",
       "      <td>0.336274</td>\n",
       "      <td>0.467646</td>\n",
       "      <td>894.541640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistics Regression</th>\n",
       "      <td>0.686158</td>\n",
       "      <td>0.269374</td>\n",
       "      <td>0.386851</td>\n",
       "      <td>1282.395059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XGBoost</th>\n",
       "      <td>0.693811</td>\n",
       "      <td>0.247841</td>\n",
       "      <td>0.365173</td>\n",
       "      <td>2093.959616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LightGBM</th>\n",
       "      <td>0.873149</td>\n",
       "      <td>0.094699</td>\n",
       "      <td>0.170858</td>\n",
       "      <td>101.975166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gaussian Naive Bayes</th>\n",
       "      <td>0.647487</td>\n",
       "      <td>0.403787</td>\n",
       "      <td>0.497367</td>\n",
       "      <td>5.492808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Catboost Optimized</th>\n",
       "      <td>0.570297</td>\n",
       "      <td>0.381093</td>\n",
       "      <td>0.456843</td>\n",
       "      <td>2087.126516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Catboost Optimized with LightGBM</th>\n",
       "      <td>0.748905</td>\n",
       "      <td>0.335605</td>\n",
       "      <td>0.463485</td>\n",
       "      <td>676.449433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistic Regression Optimized</th>\n",
       "      <td>0.688930</td>\n",
       "      <td>0.262113</td>\n",
       "      <td>0.379732</td>\n",
       "      <td>595.416245</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  PRECISION    RECALL        F1   TIEMPO (s)\n",
       "K Nearest Neighbours               0.223142  0.003169  0.006247   906.082802\n",
       "AdaBoost Classifier                0.643143  0.167621  0.265917  2255.944658\n",
       "Catboost                           0.767672  0.336274  0.467646   894.541640\n",
       "Logistics Regression               0.686158  0.269374  0.386851  1282.395059\n",
       "XGBoost                            0.693811  0.247841  0.365173  2093.959616\n",
       "LightGBM                           0.873149  0.094699  0.170858   101.975166\n",
       "Gaussian Naive Bayes               0.647487  0.403787  0.497367     5.492808\n",
       "Catboost Optimized                 0.570297  0.381093  0.456843  2087.126516\n",
       "Catboost Optimized with LightGBM   0.748905  0.335605  0.463485   676.449433\n",
       "Logistic Regression Optimized      0.688930  0.262113  0.379732   595.416245"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Agrego la columna tiempo para incluir el tiempo de ejecución de los 10 folds para todos los modelos\n",
    "\n",
    "resumen_full_dataset['TIEMPO (s)'] = tiempo\n",
    "resumen_full_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "8fdba616",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-24T19:47:07.886683Z",
     "start_time": "2022-11-24T19:47:07.859650Z"
    }
   },
   "outputs": [],
   "source": [
    "# Almaceno la tabla resumen \n",
    "# ==============================================================================\n",
    "pkl_path = \"resumen_full_dataset.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'summary dataframe' using the highest protocol available.\n",
    "    pickle.dump(resumen_full_dataset, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "aeb2e30a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-24T19:47:08.261706Z",
     "start_time": "2022-11-24T19:47:07.890641Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Creo la misma información en un gráfico. Recall será la métrica utilizada \n",
    "\n",
    "x=list(resumen_full_dataset['TIEMPO (s)'])\n",
    "y=list(resumen_full_dataset['RECALL'])\n",
    "nombres=list(resumen_full_dataset.index)\n",
    "\n",
    "plt.figure(figsize=(10, 12))\n",
    "plt.scatter(x, y)\n",
    "plt.title('Recall versus Costo de ejecución de Modelos',fontsize=25, y=+1.010 )\n",
    "plt.xlabel('Tiempo de ejecucción (s)', fontsize= 15)\n",
    "plt.ylabel('Recall', fontsize=15)\n",
    "plt.yticks(fontsize= 11)\n",
    "plt.xticks(fontsize=11)\n",
    "\n",
    "for i in range(len(nombres)):\n",
    "    plt.annotate(nombres[i], (x[i]-50, y[i]+0.0075), fontsize=12)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ed88887",
   "metadata": {},
   "source": [
    "Como se puede ver en el gráfico los modelos con mayor Recall son **Gaussian Naive Bayes** y **Catboost**. \n",
    "Las pruebas de optimizar Catboost con los parámetros obtenidos utilizando Optuna en otro modelo boost más liviano (**LightBoost**) no mejoró el valor del recall. En cambio, optimizar Catboost a través de la Optimización Bayesiana si logró una mejora en recall pero a costas de un gran aumento en el costo de procesado (más del 100%). \n",
    "\n",
    "El modelo **Logistic Regression** comunmente empleado en casos de clasificación no mejoró su recall a pesar de emplear parámetros precisos luego de realizar la optimización del modelo. Cabe aclarar, que por una diferencia en rendimiento de la máquina el tiempo de ejecución del modelo optimizado es menor al no optimizado y es algo que en este caso no debería de ser así. Para re-evaluar los costos de los modelos se debería correr nuevamente todos ellos de manera ininterrumpida. Sin embargo, en conclusión puedo decir que el uso de parámetros optimizados para Logistic Regression no mejora su rendimiento. \n",
    "\n",
    "El model **Gaussian Naive Bayes** que no tiene parámetros a optimizar es el modelo con menor costo y mayor rendimiento de todos los analizados. En oposición, **LightBoost**, **K Neartest Neighbours**, **AdaBoost** y **XGBoost** son los modelos con peor rendimiendo en recall o en tiempo de ejecución. \n",
    "\n",
    "A continuación, se buscará combinar los tres modelos con mayor rendimiento (GaussianNB, Catboost y Logistic Regression) a través de la técnica de Stacking para buscar conseguir un supermodelo superior en métricas y con un costo aceptable.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b062fb48",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd994273",
   "metadata": {},
   "source": [
    "<font size='6' style=\"color:cadetblue\"><b> Models stacking </b> </font>\n",
    "\n",
    "\n",
    "<a name=\"Stacking\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78762254",
   "metadata": {},
   "source": [
    "Elegimos realizar stacking de modelos para tomar las predicciones de cada uno de los modelos y combinarlos para crear un modelo de mayor jerarquía y poder.\n",
    "\n",
    "Haremos la prueba combinando modelos sin la optimización de sus hiperparámetros para luego contrastarlos con el mismo stacking de los modelos optimizados."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03b57984",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c00ce832",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-20T02:04:03.407043Z",
     "start_time": "2022-11-20T02:04:03.276060Z"
    }
   },
   "outputs": [],
   "source": [
    "#Creo nuevas listas para estudiar los modelos de ensamble\n",
    "\n",
    "metrics_ensemble = []\n",
    "models_ensemble = []\n",
    "tiempo_ensemble = []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33457c19",
   "metadata": {},
   "source": [
    "<br>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f4bf20f",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Logistic Regression + Catboost </b> </font>\n",
    "\n",
    "<a name=\"Lg+Cat\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)   \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "38b73fde",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-20T02:17:07.560013Z",
     "start_time": "2022-11-20T02:17:07.545344Z"
    }
   },
   "outputs": [],
   "source": [
    "#create models to combine\n",
    "lg1 = LogisticRegression (random_state=1, max_iter=7000)\n",
    "catb= CatBoostClassifier(logging_level=\"Silent\")\n",
    "lg_final = LogisticRegression (random_state=1, max_iter=7000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "770382a8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-20T05:28:41.210429Z",
     "start_time": "2022-11-20T02:17:09.124795Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.7191618031507727\n",
      "Recall's geometric mean is  0.3950228453223576\n",
      "F1 geometric mean is  0.5099056361417016\n",
      "El tiempo del modelo fue de  11492.03544163704 segundos\n"
     ]
    }
   ],
   "source": [
    "#store models to combine and define the supermodel\n",
    "ensemble= StackingClassifier (estimators= [(\"Logistic Regressor\", lg1), (\"Catboost\", catb)], final_estimator= lg_final)\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    ensemble.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=ensemble.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models_ensemble.append(\"Logistic Regression + Catboost\")\n",
    "metrics_ensemble.append(results_gmean)\n",
    "tiempo_ensemble.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "5be89f70",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-20T05:28:41.272911Z",
     "start_time": "2022-11-20T05:28:41.226046Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"LogisticRegression+Catboost.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'ensemble:Lg+Cat' model using the highest protocol available.\n",
    "    pickle.dump(ensemble, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8217d436",
   "metadata": {},
   "source": [
    "Creando un stacking combinando dos modelos diferentes que individualmente obtuvieron valores de recall elevados permite incrementar aún más el recall que empleando un modelo o el otro por separado aunque no de manera significativa. \n",
    "Pasamos de un recall de 0.336 con Catboost a un recall de 0.395 con Logistic Regression + Catboost combinados. Es decir, una mejora del 17%."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1aa042c2",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-10-24T13:38:30.549100Z",
     "start_time": "2022-10-24T13:38:30.531125Z"
    }
   },
   "source": [
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69be98fe",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-01T00:49:12.509757Z",
     "start_time": "2022-11-01T00:49:12.430771Z"
    }
   },
   "source": [
    "<font size='6' style=\"color: cadetblue\"><b> Models stacking with optimization </b> </font>\n",
    "<a name=\"Optimization\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6eee2f7",
   "metadata": {},
   "source": [
    "Utilizaré los modelos optimizados y los combinaré para crear nuevos modelos de ensamblado."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f2cdc54",
   "metadata": {},
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3569a159",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Logistic Regression + Catboost Optimized</b> </font>\n",
    "\n",
    "<a name=\"Lg+CatOpt\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)   \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "3e9fa6c3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-20T05:28:41.288564Z",
     "start_time": "2022-11-20T05:28:41.272911Z"
    }
   },
   "outputs": [],
   "source": [
    "#create models to combine and define the supermodel\n",
    "lg2 = LogisticRegression(random_state=1, max_iter=7000)\n",
    "catb2= CatBoostClassifier(iterations=3600, learning_rate= 0.85, depth= 4, logging_level=\"Silent\")\n",
    "lg_final2= LogisticRegression(random_state=1, max_iter=7000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "9c10e9d0",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-20T10:23:27.479651Z",
     "start_time": "2022-11-20T05:28:41.288564Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.6943381656819367\n",
      "Recall's geometric mean is  0.3334669083334709\n",
      "F1 geometric mean is  0.45050272731722313\n",
      "El tiempo del modelo fue de  17686.12856554985 segundos\n"
     ]
    }
   ],
   "source": [
    "    \n",
    "#store models to combine and define the supermodel\n",
    "ensemble2= StackingClassifier (estimators= [(\"Logistic Regressor\", lg2), (\"Catboost\", catb2)], final_estimator= lg_final2)\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    ensemble2.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=ensemble2.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models_ensemble.append(\"Logistic Regression + Catboost Optimizado\")\n",
    "metrics_ensemble.append(results_gmean)\n",
    "tiempo_ensemble.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "c59042f5",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-22T00:03:24.326982Z",
     "start_time": "2022-11-22T00:03:24.233885Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"LogisticRegression+Catboost_Optimized.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'ensemble:Lg+Cat Optimized' model using the highest protocol available.\n",
    "    pickle.dump(ensemble2, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee202633",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f1c3de3",
   "metadata": {},
   "source": [
    "\n",
    "<font size='4' style=\"color:darkorchid\"><b> Logistic Regression + Catboost Optimized + Cat Final</b> </font>\n",
    "\n",
    "<a name=\"Lg+CatOpt+Catfinal\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "253e902e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-20T18:48:08.606441Z",
     "start_time": "2022-11-20T18:48:08.589443Z"
    }
   },
   "outputs": [],
   "source": [
    "#Creo los modelos a combinar\n",
    "lg3 = LogisticRegression(random_state=1,max_iter=7000)\n",
    "catb3= CatBoostClassifier(iterations=3600, learning_rate= 0.85, depth= 4, logging_level=\"Silent\")\n",
    "catb_final = CatBoostClassifier(iterations=3600, learning_rate= 0.85, depth= 4, logging_level=\"Silent\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "d8755a7f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-21T00:03:48.074765Z",
     "start_time": "2022-11-20T18:48:13.909971Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.6309799038505607\n",
      "Recall's geometric mean is  0.33957349113562973\n",
      "F1 geometric mean is  0.4414936467149158\n",
      "El tiempo del modelo fue de  18934.10997080803 segundos\n"
     ]
    }
   ],
   "source": [
    "    \n",
    "#store models to combine and define the supermodel\n",
    "ensemble3= StackingClassifier (estimators= [(\"Logistic Regressor\", lg3), (\"Catboost\", catb3)], final_estimator= catb_final)\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    ensemble3.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=ensemble3.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models_ensemble.append(\"Logistic Regression + Catboost Optimized + final Catboost\")\n",
    "metrics_ensemble.append(results_gmean)\n",
    "tiempo_ensemble.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "afa4b8a9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-22T00:04:07.197971Z",
     "start_time": "2022-11-22T00:04:07.121146Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"LogisticRegression+Catboost_Optimized+FinalCatboost.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'ensemble:Lg+Cat Optimized+FinalCatboost' model using the highest protocol available.\n",
    "    pickle.dump(ensemble3, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "350d94a6",
   "metadata": {},
   "source": [
    "Utilizar como algoritmo final Catboost nos dio un recall mayor que si utilizamos Logistic regression como algortimo final pero tomó mucho más tiempo y por ende es más costoso.\n",
    "La mejora del recall no es lo suficientemente significativa como para optar por esta combinación."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62811219",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a52101fd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-10-31T18:59:35.150502Z",
     "start_time": "2022-10-31T18:59:35.116078Z"
    }
   },
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Logistic Regression + Catboost Optimized + GaussianNB</b> </font>\n",
    "\n",
    "<a name=\"Lg+CatOpt+GNB\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "aae1ec03",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T01:42:36.523393Z",
     "start_time": "2022-11-23T01:42:36.367381Z"
    }
   },
   "outputs": [],
   "source": [
    "#creo los modelos a combinar\n",
    "lg4 = LogisticRegression(random_state=1, max_iter=7000)\n",
    "catb4= CatBoostClassifier(iterations=3600, learning_rate= 0.85, depth= 4, logging_level=\"Silent\")\n",
    "gnb2 = GaussianNB()\n",
    "gnb_final = GaussianNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "6ff06e3e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-21T06:43:09.617310Z",
     "start_time": "2022-11-21T01:46:40.509653Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.49341920227824493\n",
      "Recall's geometric mean is  0.5837129510441036\n",
      "F1 geometric mean is  0.5347581989426287\n",
      "El tiempo del modelo fue de  17789.070306777954 segundos\n"
     ]
    }
   ],
   "source": [
    "#store models to combine and define the supermodel\n",
    "ensemble4= StackingClassifier (estimators= [(\"Logistic Regressor\", lg4), (\"Catboost\", catb4), (\"GaussianNB\", gnb2)], final_estimator= gnb_final)\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "            \n",
    "    #fit the model\n",
    "    ensemble4.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=ensemble4.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models_ensemble.append(\"Logistic Regression + Catboost Optimized +  GaussianNB\")\n",
    "metrics_ensemble.append(results_gmean)\n",
    "tiempo_ensemble.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "3c9f9627",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T01:42:41.090985Z",
     "start_time": "2022-11-23T01:42:41.038438Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"LogisticRegression+Catboost_Optimized+GaussianNB.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'ensemble:Lg+Cat Optimized' model using the highest protocol available.\n",
    "    pickle.dump(ensemble4, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a40f959",
   "metadata": {},
   "source": [
    "El recall de este modelo ensamble es superior a los probados anteriormente. La presencia de GaussianNB mejora sustancialmene el recall y el tiempo de procesamiento es similar a la combinación Logistic Regression + Catboost. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "187eaa23",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be0efa5b",
   "metadata": {},
   "source": [
    "\n",
    "<font size='4' style=\"color:darkorchid\"><b> Logistic Regression + GaussianNB + GaussianNB Final</b> </font>\n",
    "\n",
    "<a name=\"Lg+GNB+GNBfinal\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bff5eb5d",
   "metadata": {},
   "source": [
    "En vista de que Catboost es un modelo más costoso evaluaremos combinar solamente Logistic Regression y GuassianNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "5875098b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-21T06:43:09.917868Z",
     "start_time": "2022-11-21T06:43:09.902338Z"
    }
   },
   "outputs": [],
   "source": [
    "#creo los modelos a combinar\n",
    "lg5 = LogisticRegression(random_state=1, max_iter=7000)\n",
    "gnb3 = GaussianNB()\n",
    "gnb_final2 = GaussianNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "935031e2",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-21T08:33:53.266525Z",
     "start_time": "2022-11-21T06:43:09.922730Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.5096128679059062\n",
      "Recall's geometric mean is  0.5520593840488424\n",
      "F1 geometric mean is  0.5299691273521836\n",
      "El tiempo del modelo fue de  6643.297472000122 segundos\n"
     ]
    }
   ],
   "source": [
    "#store models to combine and define the supermodel\n",
    "ensemble5= StackingClassifier (estimators= [(\"Logistic Regressor\", lg5), (\"GaussianNB\", gnb3)], final_estimator= gnb_final2)\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    #fit the model\n",
    "    ensemble5.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=ensemble5.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models_ensemble.append(\"Logistic Regression + GausianNB + final GaussianNB\")\n",
    "metrics_ensemble.append(results_gmean)\n",
    "tiempo_ensemble.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "d00a99d9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-22T02:46:52.057611Z",
     "start_time": "2022-11-22T02:46:51.970964Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"LogisticRegressiond+GaussianNB.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'ensemble:Lg+GNB' model using the highest protocol available.\n",
    "    pickle.dump(ensemble5, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3b1cbbd",
   "metadata": {},
   "source": [
    "El rendimiento de Logistic Regression y GaussianNB es aproximadamente un 10% inferior a Logistic Regression + Catboost + GaussianNB pero demora menos del 50% del tiempo. \n",
    "Es así que dejaremos de emplear Catboost en los ensamblados y evaluaremos combinaciones de GaussianNB."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e62ea63c",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a037dcd8",
   "metadata": {},
   "source": [
    "\n",
    "<font size='4' style=\"color:darkorchid\"><b> GaussianNB x3 </b> </font>\n",
    "\n",
    "<a name=\"GNBx3\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "07cfa4e7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T01:46:30.342282Z",
     "start_time": "2022-11-23T01:46:30.324332Z"
    }
   },
   "outputs": [],
   "source": [
    "#create the models to combine\n",
    "\n",
    "gnb4 = GaussianNB()\n",
    "gnb5 = GaussianNB()\n",
    "gnb6 = GaussianNB()\n",
    "gnb_final3 = GaussianNB()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "86a2328c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T01:48:43.590235Z",
     "start_time": "2022-11-23T01:46:41.452369Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.48278849330269147\n",
      "Recall's geometric mean is  0.5881483717897232\n",
      "F1 geometric mean is  0.5302588638359649\n",
      "El tiempo del modelo fue de  122.08209681510925 segundos\n"
     ]
    }
   ],
   "source": [
    "#store models to combine and define the supermodel\n",
    "ensemble6= StackingClassifier (estimators= [(\"gnb4\",gnb4),(\"gnb5\",gnb5),(\"gnb6\",gnb6)],final_estimator=gnb_final3)\n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    \n",
    "    #fit the model\n",
    "    ensemble6.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=ensemble6.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models_ensemble.append(\"GaussianNBx3\")\n",
    "metrics_ensemble.append(results_gmean)\n",
    "tiempo_ensemble.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "55795fe8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T01:55:55.085988Z",
     "start_time": "2022-11-23T01:55:55.050995Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"Gaussianx3.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'Gaussianx3' model using the highest protocol available.\n",
    "    pickle.dump(ensemble6, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5185520",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3c6a655",
   "metadata": {},
   "source": [
    "\n",
    "<font size='4' style=\"color:darkorchid\"><b> GaussianNB x5 </b> </font>\n",
    "\n",
    "<a name=\"GNBx5\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "c4fb67b8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T01:48:43.621148Z",
     "start_time": "2022-11-23T01:48:43.597217Z"
    }
   },
   "outputs": [],
   "source": [
    "#create the models to combine\n",
    "\n",
    "gnb7 = GaussianNB()\n",
    "gnb8 = GaussianNB()\n",
    "gnb9 = GaussianNB()\n",
    "gnb10 = GaussianNB()\n",
    "gnb11 = GaussianNB()\n",
    "gnb_final4 = GaussianNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "cb375091",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T01:51:43.838167Z",
     "start_time": "2022-11-23T01:48:43.624142Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.4678860392584136\n",
      "Recall's geometric mean is  0.606439786939775\n",
      "F1 geometric mean is  0.528206221439953\n",
      "El tiempo del modelo fue de  180.14920830726624 segundos\n"
     ]
    }
   ],
   "source": [
    "#store models to combine and define the supermodel\n",
    "ensemble7= StackingClassifier (estimators= [(\"gnb7\",gnb7),(\"gnb8\",gnb8),(\"gnb9\",gnb9),(\"gnb10\",gnb10),(\"gnb11\",gnb11)],final_estimator=gnb_final4)\n",
    "        \n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "   \n",
    "    #fit the model\n",
    "    ensemble7.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=ensemble7.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models_ensemble.append(\"GaussianNBx5\")\n",
    "metrics_ensemble.append(results_gmean)\n",
    "tiempo_ensemble.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "023591e1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T01:55:55.148742Z",
     "start_time": "2022-11-23T01:55:55.138759Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"Gaussianx5.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'Gaussianx5' model using the highest protocol available.\n",
    "    pickle.dump(ensemble7, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d6f4b5f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-21T08:37:42.617901Z",
     "start_time": "2022-11-21T08:37:42.572557Z"
    }
   },
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70f35d0b",
   "metadata": {},
   "source": [
    "\n",
    "<font size='4' style=\"color:darkorchid\"><b> GaussianNB x7 </b> </font>\n",
    "\n",
    "<a name=\"GNBx7\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "96d1fdc2",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T01:51:43.914711Z",
     "start_time": "2022-11-23T01:51:43.871083Z"
    }
   },
   "outputs": [],
   "source": [
    "#create the models to combine\n",
    "\n",
    "gnb12 = GaussianNB()\n",
    "gnb13 = GaussianNB()\n",
    "gnb14 = GaussianNB()\n",
    "gnb15 = GaussianNB()\n",
    "gnb16 = GaussianNB()\n",
    "gnb17 = GaussianNB()\n",
    "gnb18 = GaussianNB()\n",
    "gnb_final5 = GaussianNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "f8f7b79e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T01:55:54.461003Z",
     "start_time": "2022-11-23T01:51:43.917721Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.4598959230663647\n",
      "Recall's geometric mean is  0.6144474981208833\n",
      "F1 geometric mean is  0.5260314206588868\n",
      "El tiempo del modelo fue de  250.52009272575378 segundos\n"
     ]
    }
   ],
   "source": [
    "#store models to combine and define the supermodel\n",
    "ensemble8= StackingClassifier (estimators= [(\"gnb12\",gnb12),(\"gnb13\",gnb13),(\"gnb14\",gnb14),(\"gnb15\",gnb15),(\"gnb16\",gnb16),(\"gnb17\",gnb17),(\"gnb18\",gnb18)],final_estimator=gnb_final5)\n",
    "    \n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    \n",
    "    #fit the model\n",
    "    ensemble8.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=ensemble8.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models_ensemble.append(\"GaussianNBx7\")\n",
    "metrics_ensemble.append(results_gmean)\n",
    "tiempo_ensemble.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "0b8e61ed",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T01:55:55.258258Z",
     "start_time": "2022-11-23T01:55:55.244739Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "# ==============================================================================\n",
    "pkl_path = \"Gaussianx7.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'Gaussianx7' model using the highest protocol available.\n",
    "    pickle.dump(ensemble8, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b73131bc",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4eb7822f",
   "metadata": {},
   "source": [
    "\n",
    "<font size='4' style=\"color:darkorchid\"><b> GaussianNB x11 </b> </font>\n",
    "\n",
    "<a name=\"GNBx11\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "ec811589",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T22:38:49.373017Z",
     "start_time": "2022-11-23T22:38:49.358055Z"
    }
   },
   "outputs": [],
   "source": [
    "#create the models to combine\n",
    "\n",
    "gnb19 = GaussianNB()\n",
    "gnb20 = GaussianNB()\n",
    "gnb21 = GaussianNB()\n",
    "gnb22 = GaussianNB()\n",
    "gnb23 = GaussianNB()\n",
    "gnb24 = GaussianNB()\n",
    "gnb25 = GaussianNB()\n",
    "gnb26 = GaussianNB()\n",
    "gnb27 = GaussianNB()\n",
    "gnb28 = GaussianNB()\n",
    "gnb29 = GaussianNB()\n",
    "gnb_final6 = GaussianNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "98997d63",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T22:45:48.256990Z",
     "start_time": "2022-11-23T22:39:13.743394Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision's geometric mean is  0.45316693565353\n",
      "Recall's geometric mean is  0.6213678019612798\n",
      "F1 geometric mean is  0.5240829266112892\n",
      "El tiempo del modelo fue de  394.4042248725891 segundos\n"
     ]
    }
   ],
   "source": [
    "#store models to combine and define the supermodel\n",
    "ensemble9= StackingClassifier (estimators= [(\"gnb19\",gnb19),(\"gnb20\",gnb20),(\"gnb21\",gnb21),(\"gnb22\",gnb22),(\"gnb23\",gnb23),(\"gnb24\",gnb24),(\"gnb25\",gnb25),(\"gnb26\",gnb26),(\"gnb27\",gnb27),(\"gnb28\",gnb28),(\"gnb29\",gnb29)],final_estimator=gnb_final6)\n",
    "    \n",
    "\n",
    "#lista para almacenar las métricas de cada fold\n",
    "model_metrics=[]\n",
    "\n",
    "#inicio el contador de tiempo para calcular el costo del modelo\n",
    "inicio = time.time()\n",
    "\n",
    "#Split between training and testing\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "        \n",
    "    X_train=X.iloc[train_index]\n",
    "    X_test=X.iloc[test_index] \n",
    "    y_train=y.iloc[train_index]\n",
    "    y_test=y.iloc[test_index]\n",
    "    \n",
    "    \n",
    "    #fit the model\n",
    "    ensemble9.fit(X_train, y_train)\n",
    "    \n",
    "    #make predictions\n",
    "    y_pred=ensemble9.predict(X_test)\n",
    "    \n",
    "    #calculate metrics\n",
    "    cm=confusion_matrix(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1= f1_score(y_test, y_pred)\n",
    "\n",
    "    #store each fold's metrics\n",
    "    results = [precision, recall, f1]\n",
    "    model_metrics.append(results)\n",
    "    \n",
    "#display the first fold's confusion matrix\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [0, 1])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "#finalizamos el contador de tiempo del modelo\n",
    "fin = time.time()\n",
    "\n",
    "#store and print the metric's gmean after the 10 folds\n",
    "results_gmean= gmean(model_metrics)\n",
    "print(\"Precision's geometric mean is \" , results_gmean[0])\n",
    "print(\"Recall's geometric mean is \", results_gmean[1])\n",
    "print(\"F1 geometric mean is \", results_gmean[2])\n",
    "\n",
    "#add these to the general lists\n",
    "models_ensemble.append(\"GaussianNBx11\")\n",
    "metrics_ensemble.append(results_gmean)\n",
    "tiempo_ensemble.append(fin-inicio)\n",
    "\n",
    "print(\"El tiempo del modelo fue de \", fin-inicio, \"segundos\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65fba8a8",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17382663",
   "metadata": {},
   "source": [
    "<font size='4' style=\"color:darkorchid\"><b> Models ensemble summary </b> </font>\n",
    "\n",
    "<a name=\"EnsembleSummary\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "fb018bd4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-25T21:12:28.332744Z",
     "start_time": "2022-11-25T21:12:28.291427Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Logistic Regression + Catboost',\n",
       " 'Logistic Regression + Catboost Optimizado',\n",
       " 'Logistic Regression + Catboost Optimized + final Catboost',\n",
       " 'Logistic Regression + Catboost Optimized +  GaussianNB',\n",
       " 'Logistic Regression + GausianNB + final GaussianNB',\n",
       " 'GaussianNBx3',\n",
       " 'GaussianNBx5',\n",
       " 'GaussianNBx7',\n",
       " 'GaussianNBx11']"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models_ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "50c67ffa",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-25T21:25:26.411890Z",
     "start_time": "2022-11-25T21:25:26.384268Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PRECISION</th>\n",
       "      <th>RECALL</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Logistic Regression + Catboost</th>\n",
       "      <td>0.719162</td>\n",
       "      <td>0.395023</td>\n",
       "      <td>0.509906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistic Regression + Catboost Optimizado</th>\n",
       "      <td>0.694338</td>\n",
       "      <td>0.333467</td>\n",
       "      <td>0.450503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistic Regression + Catboost Optimized + final Catboost</th>\n",
       "      <td>0.630980</td>\n",
       "      <td>0.339573</td>\n",
       "      <td>0.441494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistic Regression + Catboost Optimized +  GaussianNB</th>\n",
       "      <td>0.493419</td>\n",
       "      <td>0.583713</td>\n",
       "      <td>0.534758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistic Regression + GausianNB + final GaussianNB</th>\n",
       "      <td>0.509613</td>\n",
       "      <td>0.552059</td>\n",
       "      <td>0.529969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GaussianNBx3</th>\n",
       "      <td>0.482788</td>\n",
       "      <td>0.588148</td>\n",
       "      <td>0.530259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GaussianNBx5</th>\n",
       "      <td>0.467886</td>\n",
       "      <td>0.606440</td>\n",
       "      <td>0.528206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GaussianNBx7</th>\n",
       "      <td>0.459896</td>\n",
       "      <td>0.614447</td>\n",
       "      <td>0.526031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GaussianNBx11</th>\n",
       "      <td>0.453167</td>\n",
       "      <td>0.621368</td>\n",
       "      <td>0.524083</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    PRECISION    RECALL  \\\n",
       "Logistic Regression + Catboost                       0.719162  0.395023   \n",
       "Logistic Regression + Catboost Optimizado            0.694338  0.333467   \n",
       "Logistic Regression + Catboost Optimized + fina...   0.630980  0.339573   \n",
       "Logistic Regression + Catboost Optimized +  Gau...   0.493419  0.583713   \n",
       "Logistic Regression + GausianNB + final GaussianNB   0.509613  0.552059   \n",
       "GaussianNBx3                                         0.482788  0.588148   \n",
       "GaussianNBx5                                         0.467886  0.606440   \n",
       "GaussianNBx7                                         0.459896  0.614447   \n",
       "GaussianNBx11                                        0.453167  0.621368   \n",
       "\n",
       "                                                          F1  \n",
       "Logistic Regression + Catboost                      0.509906  \n",
       "Logistic Regression + Catboost Optimizado           0.450503  \n",
       "Logistic Regression + Catboost Optimized + fina...  0.441494  \n",
       "Logistic Regression + Catboost Optimized +  Gau...  0.534758  \n",
       "Logistic Regression + GausianNB + final GaussianNB  0.529969  \n",
       "GaussianNBx3                                        0.530259  \n",
       "GaussianNBx5                                        0.528206  \n",
       "GaussianNBx7                                        0.526031  \n",
       "GaussianNBx11                                       0.524083  "
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creo un dataframe para visualizar como tabla las 3 métricas calculadas para todos los modelos evaluados\n",
    "#Los nombres de los modelos fueron almacenados en la lista modelos cuando se fueron corriendo\n",
    "\n",
    "columnas = [\"PRECISION\", \"RECALL\", \"F1\"]\n",
    "resumen_ensemble = pd.DataFrame(metrics_ensemble, columns=columnas, index=models_ensemble)\n",
    "resumen_ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "c7e81e10",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-25T21:25:51.536330Z",
     "start_time": "2022-11-25T21:25:51.479792Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PRECISION</th>\n",
       "      <th>RECALL</th>\n",
       "      <th>F1</th>\n",
       "      <th>TIEMPO (s)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Logistic Regression + Catboost</th>\n",
       "      <td>0.719162</td>\n",
       "      <td>0.395023</td>\n",
       "      <td>0.509906</td>\n",
       "      <td>11492.035442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistic Regression + Catboost Optimizado</th>\n",
       "      <td>0.694338</td>\n",
       "      <td>0.333467</td>\n",
       "      <td>0.450503</td>\n",
       "      <td>17686.128566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistic Regression + Catboost Optimized + final Catboost</th>\n",
       "      <td>0.630980</td>\n",
       "      <td>0.339573</td>\n",
       "      <td>0.441494</td>\n",
       "      <td>18934.109971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistic Regression + Catboost Optimized +  GaussianNB</th>\n",
       "      <td>0.493419</td>\n",
       "      <td>0.583713</td>\n",
       "      <td>0.534758</td>\n",
       "      <td>17789.070307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistic Regression + GausianNB + final GaussianNB</th>\n",
       "      <td>0.509613</td>\n",
       "      <td>0.552059</td>\n",
       "      <td>0.529969</td>\n",
       "      <td>6643.297472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GaussianNBx3</th>\n",
       "      <td>0.482788</td>\n",
       "      <td>0.588148</td>\n",
       "      <td>0.530259</td>\n",
       "      <td>122.082097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GaussianNBx5</th>\n",
       "      <td>0.467886</td>\n",
       "      <td>0.606440</td>\n",
       "      <td>0.528206</td>\n",
       "      <td>180.149208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GaussianNBx7</th>\n",
       "      <td>0.459896</td>\n",
       "      <td>0.614447</td>\n",
       "      <td>0.526031</td>\n",
       "      <td>250.520093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GaussianNBx11</th>\n",
       "      <td>0.453167</td>\n",
       "      <td>0.621368</td>\n",
       "      <td>0.524083</td>\n",
       "      <td>394.404225</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    PRECISION    RECALL  \\\n",
       "Logistic Regression + Catboost                       0.719162  0.395023   \n",
       "Logistic Regression + Catboost Optimizado            0.694338  0.333467   \n",
       "Logistic Regression + Catboost Optimized + fina...   0.630980  0.339573   \n",
       "Logistic Regression + Catboost Optimized +  Gau...   0.493419  0.583713   \n",
       "Logistic Regression + GausianNB + final GaussianNB   0.509613  0.552059   \n",
       "GaussianNBx3                                         0.482788  0.588148   \n",
       "GaussianNBx5                                         0.467886  0.606440   \n",
       "GaussianNBx7                                         0.459896  0.614447   \n",
       "GaussianNBx11                                        0.453167  0.621368   \n",
       "\n",
       "                                                          F1    TIEMPO (s)  \n",
       "Logistic Regression + Catboost                      0.509906  11492.035442  \n",
       "Logistic Regression + Catboost Optimizado           0.450503  17686.128566  \n",
       "Logistic Regression + Catboost Optimized + fina...  0.441494  18934.109971  \n",
       "Logistic Regression + Catboost Optimized +  Gau...  0.534758  17789.070307  \n",
       "Logistic Regression + GausianNB + final GaussianNB  0.529969   6643.297472  \n",
       "GaussianNBx3                                        0.530259    122.082097  \n",
       "GaussianNBx5                                        0.528206    180.149208  \n",
       "GaussianNBx7                                        0.526031    250.520093  \n",
       "GaussianNBx11                                       0.524083    394.404225  "
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Agrego la columna tiempo para incluir el tiempo de ejecución de los 10 folds para todos los modelos\n",
    "\n",
    "resumen_ensemble['TIEMPO (s)'] = tiempo_ensemble\n",
    "resumen_ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "e788d52a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-25T21:27:58.981731Z",
     "start_time": "2022-11-25T21:27:58.702116Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Creo la misma información en un gráfico. Recall será la métrica utilizada \n",
    "\n",
    "x=list(resumen_ensemble['TIEMPO (s)'])\n",
    "y=list(resumen_ensemble['RECALL'])\n",
    "nombres=list(resumen_ensemble.index)\n",
    "\n",
    "plt.figure(figsize=(10, 12))\n",
    "plt.scatter(x, y)\n",
    "plt.title('Recall versus Costo de ejecución de Modelos ensamblados',fontsize=25, y=+1.010 )\n",
    "plt.xlabel('Tiempo de ejecucción (s)', fontsize= 15)\n",
    "plt.ylabel('Recall', fontsize=15)\n",
    "plt.yticks(fontsize= 11)\n",
    "plt.xticks(fontsize=11)\n",
    "\n",
    "for i in range(len(nombres)):\n",
    "    plt.annotate(nombres[i], (x[i]-50, y[i]+0.0075), fontsize=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "c0510282",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-25T22:21:01.626447Z",
     "start_time": "2022-11-25T22:21:01.495800Z"
    }
   },
   "outputs": [],
   "source": [
    "# Almaceno la tabla resumen \n",
    "# ==============================================================================\n",
    "pkl_path = \"resumen_ensembles.pkl\"\n",
    "\n",
    "with open(pkl_path, \"wb\") as f:\n",
    "    # Pickle the 'summary ensembles models dataframe' using the highest protocol available.\n",
    "    pickle.dump(resumen_ensemble, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee7255c5",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afa257cb",
   "metadata": {},
   "source": [
    "<font size='6' style=\"color:cadetblue\"><b> Conclusión final </b> </font>\n",
    "\n",
    "<a name=\"Conclusion\"></a>\n",
    "\n",
    "[[ Back to Top ]](#content)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d7ce3e2",
   "metadata": {},
   "source": [
    "Combinar modelos permite crear supermodelos con mayor rendimiento de recall pero en algunos casos a un costo de procesado muy elevado. \n",
    "El modelo GaussianNB que no tiene parámetros para optimizar, es más veloz y consigue un valor de recall superior a todos los otros modelos. La presencia de GaussianNB en los modelos ensamblados aumenta en más de un 20% el recall con respecto a otros ensamblados. \n",
    "\n",
    "La combinación de varios modelos GaussianNB resultó ser la más exitosa para predecir si se realizará o no una transacción. Empleando un stacking de 5 modelos GuassianNB es cuando el valor de recall alcanza 0.61 a un costo computacional mínimo. Crear ensamblados con más modelos GaussianNB combinados sigue aumentando el recall pero demasiado poco frente a un aumento en el costo de procesado mucho mayor. \n",
    "\n",
    "La búsqueda realizada nos permite concluir que si bien se han analizado y optimizado diversos modelos, GaussianNB es el modelo que mejor predice este set de datos. Es un buen inicio de análisis y con más tiempo de estudio y mayor poder computacional seguramente sea posible mejorar aún más los valores de recall obtenidos. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7e76a13",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
